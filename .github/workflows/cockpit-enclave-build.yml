name: Cockpit Enclave Build

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build:

    runs-on: ubuntu-latest
    outputs:
        buildVersion: ${{ steps.gitversion.outputs.AssemblySemVer }}
        channel: ${{ steps.version.outputs.channel }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Determine Channel
      id: version
      run: |
        export CHANNEL=stable
        if [[ "${GITHUB_REF}" != *master ]]
        then
            CHANNEL=unstable
        fi
        echo "::set-output name=channel::$CHANNEL"

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
              
    - name: Setup Node (SDK)
      uses: actions/setup-node@v2

    - name: Install Node Modules
      run: npm i

    - name: Get patternfly library
      run: |
        git fetch --depth=1 https://github.com/cockpit-project/cockpit.git 253; \
        git checkout --force FETCH_HEAD -- pkg/lib; \
        git reset -- pkg/lib; \
        mv pkg/lib src/ && rmdir -p pkg 

    - name: Webpack Build
      run: npx webpack

    - name: build RPM package
      run: |
        mkdir cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}
        cp -r dist/. cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}
        tar --create --file cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.tar.gz cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}
        mkdir -p ~/rpmbuild/BUILD ~/rpmbuild/BUILDROOT ~/rpmbuild/RPMS ~/rpmbuild/SOURCES ~/rpmbuild/SPECS ~/rpmbuild/SRPMS
        cp build/rpm/cockpit-enclave.spec ~/rpmbuild/SPECS
        cp cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.tar.gz ~/rpmbuild/SOURCES
        rpmbuild -bb --define="version ${{ steps.gitversion.outputs.AssemblySemVer }}" ~/rpmbuild/SPECS/cockpit-enclave.spec
        cp -r ~/rpmbuild/RPMS/noarch/cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}-1.noarch.rpm ./cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.noarch.rpm

    - name: Build DEB Package
      run: |
        mkdir -p build/deb/usr/share/cockpit/enclave
        cp -r dist/. build/deb/usr/share/cockpit/enclave
        sed -i 's/{{version}}/${{ steps.gitversion.outputs.AssemblySemVer }}/g' ./build/deb/DEBIAN/control
        dpkg -b ./build/deb ./cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.deb

    - name: Upload rpm package
      uses: actions/upload-artifact@v2
      with:
        name: cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.noarch.rpm
        path: ./cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.noarch.rpm

    - name: Upload deb package
      uses: actions/upload-artifact@v2
      with:
        name: cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.deb
        path: ./cockpit-enclave-${{ steps.gitversion.outputs.AssemblySemVer }}.deb



  update-deb-repo:
    needs: build
    name: Update Deb Repo
    runs-on: repo-runner

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: cockpit-enclave-${{needs.build.outputs.buildVersion}}.deb
        path: debs/

    - uses: enclave-networks/.github/generate-deb-repo@v1
      with:
        packageLocation: debs
        fabricChannel: ${{needs.build.outputs.channel}}
        aws-s3-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
        aws-s3-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
        private_package_access_token: ${{ secrets.PRIVATE_PACKAGE_ACCESS_TOKEN }}
        deb_package_gpg_key: ${{secrets.DEB_PACKAGE_GPG_KEY}}
        deb_package_gpg_passphrase: ${{secrets.DEB_PACKAGE_GPG_PASSPHRASE}}

  update-rpm-repo:
    needs: build
    runs-on: repo-runner
    container:
      image: fedora:35
      volumes:
        - /pkg:/pkg

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: cockpit-enclave-${{needs.build.outputs.fabricBuildVersion}}.noarch.rpm
        path: rpm/


    - uses: enclave-networks/.github/generate-rpm-repo@v1
      with:
        packageLocation: rpm
        fabricChannel: ${{needs.build.outputs.channel}}
        aws-s3-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
        aws-s3-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
  
  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: cockpit-enclave-${{needs.build.outputs.buildVersion}}.deb
        path: packages/

    - uses: actions/download-artifact@v2
      with:
        name: cockpit-enclave-${{needs.build.outputs.fabricBuildVersion}}.noarch.rpm
        path: packages/

    - name: Create Release 
      id: create_release   
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.fabricBuildVersion }}
        release_name: Release v${{ needs.build.outputs.fabricBuildVersion }}
        body: Latest SDK API Release

    - name: Upload RPM Release Asset        
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: packages/cockpit-enclave-${{ needs.build.outputs.fabricBuildVersion }}.noarch.rpm
        asset_name: cockpit-enclave-${{ needs.build.outputs.fabricBuildVersion }}.noarch.rpm
        asset_content_type: application/octet-stream

    - name: Upload Deb Release Asset        
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: packages/cockpit-enclave-${{ needs.build.outputs.fabricBuildVersion }}.deb
        asset_name: cockpit-enclave-${{ needs.build.outputs.fabricBuildVersion }}.deb
        asset_content_type: application/octet-stream    